<?php

class BFIShortcodeModel implements iBFIShortcode {
    
    const SHORTCODE = 'shortcode';
    const ALIAS = '';
    const ALIAS2 = '';
    const ALIAS3 = '';
    
    function __construct() {
        add_shortcode($this->getShortcodeName(), array($this, 'startRender'));
        if ($this->getShortcodeAlias())
            add_shortcode($this->getShortcodeAlias(), array($this, 'startRender'));
        if ($this->getShortcodeAlias2())
            add_shortcode($this->getShortcodeAlias2(), array($this, 'startRender'));
        if ($this->getShortcodeAlias3())
            add_shortcode($this->getShortcodeAlias3(), array($this, 'startRender'));
    }
    
    private function getShortcodeName() {
        return constant(get_class($this)."::SHORTCODE");
    }
    
    private function getShortcodeAlias() {
        return constant(get_class($this)."::ALIAS");
    }
    
    private function getShortcodeAlias2() {
        return constant(get_class($this)."::ALIAS2");
    }
    
    private function getShortcodeAlias3() {
        return constant(get_class($this)."::ALIAS3");
    }
    
    // this will be overridden by child classes
    public function render($content = NULL, $unusedAttributeString = '') { }
    
    public function startRender($attributes, $content = NULL) {
        // set all the properties to default before continuing
        $classProperties = get_object_vars($this);
        $classDefaultProperties = get_class_vars(get_class($this));
        foreach ($classDefaultProperties as $key => $value)
            $this->$key = $value;
        
        // set the class properties depending on the attributes
        $unusedAttributeString = '';
        if (is_array($attributes)) {
            foreach ($attributes as $key => $value) {
                if (property_exists(get_class($this), $key)) {
                    $value = trim($value);
                    if ($value === 'true') { $value = true; }
                    else if ($value === 'false') { $value = false; }
                    $this->$key = $value;
					// apply shortcodes in attributes. WP doesn't allow square brackets in attributes, but
					// let's assume that curly brackets are shortcodes instead
					if (is_string($value)) {
							$this->$key = do_shortcode(preg_replace('/\{([^\}]+)\}/', '[${1}]', $value));
					}
                } else {
                    if (is_int($key)) { // for possible other attributes
                        $unusedAttributeString .= $unusedAttributeString ? ' ' : '';
                        $unusedAttributeString .= $value;
                        continue;
                    }
                    /*
                    if (is_int($key)) { // for line breaks and possible data attributes
                        var_dump($value);
                        if (stripos($value, '=') === false) continue; // this is a line break
                        $value = explode('=', trim($value));
                        $key = trim($value[0]);
                        $value = trim($value[1], "'\""); // remove quotes 
                    }
                    */
                    $unusedAttributeString .= $unusedAttributeString ? ' ' : '';
                    $unusedAttributeString .= $key . '="' . addslashes(trim($value)) . '"'; 
                }
            }
        }
        $content = $this->formatContent($content);
        return $this->render($content, $unusedAttributeString);
    }
    
    /**
     * Modified but, got this from http://themeforest.net/forums/thread/shortcode-paragraph-removal/37123?page=2
     * Removes added <p> and <br> tags generated by WP because of shortcodes
     * not being strictly side by side.
     * 
     * Usage: Call this instead of do_shortcode in shortcode functions
     * 
     * @param $content the content
     * 
     * @return parsed shortcode
     */
    protected static function formatContent($content) {
        $content = ' '.$content.' '; 
        $content = do_shortcode(shortcode_unautop($content));
        $content = preg_replace('#^<\/p>|^<br \/>|^<br\/>|^<br>|<p>$#', '', $content);
				$content = trim($content);
				$content = preg_replace('#^\r?\n?<br[^>]+>\r?\n?#', '', $content);
				$content = preg_replace('#\r?\n?<br[^>]+>\r?\n?$#', '', $content);
        if (function_exists('bfi_strip_stuff'))
            $content = bfi_strip_stuff($content);
        return $content;
    }
}
