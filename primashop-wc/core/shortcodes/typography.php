<?php
/**
 * Functions to handle typography shortcodes
 *
 * WARNING: This file is part of the core PrimaThemes framework.
 * DO NOT edit this file under any circumstances. 
 *
 * Credits (and Inspirations):
 * - WooFramework by WooThemes http://woothemes.com
 *
 * @category   PrimaThemes
 * @package    Framework
 * @subpackage Shortcodes
 * @author     PrimaThemes
 * @link       http://www.primathemes.com
 */

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

/**
 * Make text widget accept shortcodes.
 *
 * @since PrimaThemes 2.0
 */ 
add_filter('widget_text', 'do_shortcode');

/**
 * Register typhography shortcodes.
 *
 * @since PrimaThemes 2.0
 */ 
add_shortcode('column', 'prima_typography_shortcodes');
add_shortcode('twocol_one', 'prima_typography_shortcodes');
add_shortcode('twocol_one_last', 'prima_typography_shortcodes');
add_shortcode('threecol_one', 'prima_typography_shortcodes');
add_shortcode('threecol_one_last', 'prima_typography_shortcodes');
add_shortcode('threecol_two', 'prima_typography_shortcodes');
add_shortcode('threecol_two_last', 'prima_typography_shortcodes');
add_shortcode('fourcol_one', 'prima_typography_shortcodes');
add_shortcode('fourcol_one_last', 'prima_typography_shortcodes');
add_shortcode('fourcol_two', 'prima_typography_shortcodes');
add_shortcode('fourcol_two_last', 'prima_typography_shortcodes');
add_shortcode('fourcol_three', 'prima_typography_shortcodes');
add_shortcode('fourcol_three_last', 'prima_typography_shortcodes');
add_shortcode('fivecol_one', 'prima_typography_shortcodes');
add_shortcode('fivecol_one_last', 'prima_typography_shortcodes');
add_shortcode('fivecol_two', 'prima_typography_shortcodes');
add_shortcode('fivecol_two_last', 'prima_typography_shortcodes');
add_shortcode('fivecol_three', 'prima_typography_shortcodes');
add_shortcode('fivecol_three_last', 'prima_typography_shortcodes');
add_shortcode('fivecol_four', 'prima_typography_shortcodes');
add_shortcode('fivecol_four_last', 'prima_typography_shortcodes');
add_shortcode('sixcol_one', 'prima_typography_shortcodes');
add_shortcode('sixcol_one_last', 'prima_typography_shortcodes');
add_shortcode('sixcol_two', 'prima_typography_shortcodes');
add_shortcode('sixcol_two_last', 'prima_typography_shortcodes');
add_shortcode('sixcol_three', 'prima_typography_shortcodes');
add_shortcode('sixcol_three_last', 'prima_typography_shortcodes');
add_shortcode('sixcol_four', 'prima_typography_shortcodes');
add_shortcode('sixcol_four_last', 'prima_typography_shortcodes');
add_shortcode('sixcol_five', 'prima_typography_shortcodes');
add_shortcode('sixcol_five_last', 'prima_typography_shortcodes');
add_shortcode('hr', 'prima_typography_shortcodes');
add_shortcode('divider', 'prima_typography_shortcodes');
add_shortcode('divider_flat', 'prima_typography_shortcodes');
add_shortcode('dropcap', 'prima_typography_shortcodes' );
add_shortcode('highlight', 'prima_typography_shortcodes' );
add_shortcode('tagline', 'prima_typography_shortcodes' );
add_shortcode('quote', 'prima_typography_shortcodes');
add_shortcode('box_container', 'prima_typography_shortcodes');
add_shortcode('box', 'prima_typography_shortcodes');
add_shortcode('button', 'prima_typography_shortcodes');
add_shortcode('tabs', 'prima_typography_shortcodes', 15 );
add_shortcode('tab', 'prima_typography_shortcodes', 20 );
add_shortcode('toggle', 'prima_typography_shortcodes');
add_shortcode('heading', 'prima_typography_shortcodes');
add_shortcode('icon', 'prima_typography_shortcodes');

/**
 * Helper function to remove invalid <p> tags.
 * This function doesn't strip out native WordPress functionality.
 *
 *
 * For example:
 * 
 * [shortcode] 
 *  
 * shortcode content
 *  
 * [shortcode]
 * 
 * 
 * Output: 
 *
 * </p>
 * <br />
 * <p>shortcode content</p>
 * <p> 
 *
 *
 * This function removes invalid </p> and <br /> tag in the begining 
 * and invalid <p> in the endof shortcode output.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_clean_invalid_autop( $content ) { 
	/* Removes invalid <br/> or </p> tag in the begining and invalid <p> in the end of shortcode block. */
	$content = preg_replace( array( '/^<\/p>/', '/<p>$/', '/^<br \/>/', '/<br \/>$/' ), '', $content);
	/* Removes invalid <br/> or </p> between two shortcode block. */
	$content = str_replace( array( "]<br />[", "]<br />\n[", "]</p>[", "]</p>\n[" ), '][', $content);
	return do_shortcode( shortcode_unautop( $content ) ); 
}

/**
 * Define typhography shortcodes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_typography_shortcodes($atts, $content=null, $code=""){
	switch( $code ){
	
		/* Columns */
		case 'column':
			extract(shortcode_atts(array( 'left' => '', 'right' => '' ), $atts));  
			$paddingleft = $left ? 'padding-left:'.$left.'px;' : '';  
			$paddingright = $right ? 'padding-right:'.$right.'px;' : '';  
			$style = ($paddingleft || $paddingright) ? ' style="'.$paddingleft.$paddingright.'"' : '';
			$output = '<div class="ps-column" '.$style.'>' . prima_clean_invalid_autop($content) . '<div class="ps-divider flat"></div></div>';
		break;
		case 'twocol_one':
			$output = '<div class="ps-column-col twocol-one">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'twocol_one_last':
			$output = '<div class="ps-column-col twocol-one last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'threecol_one':
			$output = '<div class="ps-column-col threecol-one">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'threecol_one_last':
			$output = '<div class="ps-column-col threecol-one last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'threecol_two':
			$output = '<div class="ps-column-col threecol-two">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'threecol_two_last':
			$output = '<div class="ps-column-col threecol-two last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fourcol_one':
			$output = '<div class="ps-column-col fourcol-one">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fourcol_one_last':
			$output = '<div class="ps-column-col fourcol-one last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fourcol_two':
			$output = '<div class="ps-column-col fourcol-two">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fourcol_two_last':
			$output = '<div class="ps-column-col fourcol-two last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fourcol_three':
			$output = '<div class="ps-column-col fourcol-three">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fourcol_three_last':
			$output = '<div class="ps-column-col fourcol-three last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_one':
			$output = '<div class="ps-column-col fivecol-one">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_one_last':
			$output = '<div class="ps-column-col fivecol-one last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_two':
			$output = '<div class="ps-column-col fivecol-two">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_two_last':
			$output = '<div class="ps-column-col fivecol-two last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_three':
			$output = '<div class="ps-column-col fivecol-three">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_three_last':
			$output = '<div class="ps-column-col fivecol-three last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_four':
			$output = '<div class="ps-column-col fivecol-four">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'fivecol_four_last':
			$output = '<div class="ps-column-col fivecol-four last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_one':
			$output = '<div class="ps-column-col sixcol-one">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_one_last':
			$output = '<div class="ps-column-col sixcol-one last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_two':
			$output = '<div class="ps-column-col sixcol-two">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_two_last':
			$output = '<div class="ps-column-col sixcol-two last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_three':
			$output = '<div class="ps-column-col sixcol-three">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_three_last':
			$output = '<div class="ps-column-col sixcol-three last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_four':
			$output = '<div class="ps-column-col sixcol-four">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_four_last':
			$output = '<div class="ps-column-col sixcol-four last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_five':
			$output = '<div class="ps-column-col sixcol-five">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		case 'sixcol_five_last':
			$output = '<div class="ps-column-col sixcol-five last">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		
		/* Horizontal line */
		case 'hr':
			extract(shortcode_atts(array( 'left' => '', 'right' => '', 'top' => '', 'bottom' => '', 'width' => '' ), $atts));  
			$marginleft = $left ? 'margin-left:'.$left.'px;' : '';  
			$marginright = $right ? 'margin-right:'.$right.'px;' : '';  
			$paddingtop = is_numeric($top) ? 'padding-top:'.$top.'px;' : '';  
			$marginbottom = is_numeric($bottom) ? 'margin-bottom:'.$bottom.'px;' : '';  
			$cwidth = $width ? 'width:'.$width.'px;' : '';  
			$style = $marginleft.$marginright.$paddingtop.$marginbottom.$cwidth;  
			$style = $style ? ' style="'.$style.'"' : '';  
			$output = '<div class="ps-hr" '.$style.'></div>';
		break;
		
		/* Divider */
		case 'divider':
			$output = '<div class="ps-divider"></div>';
		break;
		
		/* Divider flat */
		case 'divider_flat':
		    $output = '<div class="ps-divider flat"></div>';
		break;
		
		/* Dropcap */
		case 'dropcap':
			$output = '<span class="ps-dropcap">' . $content . '</span>';
		break;
		
		/* Highlight */
		case 'highlight':
			$output = '<span class="ps-highlight">' . $content . '</span>';
		break;
		
		/* Tagline */
		case 'tagline':
			extract(shortcode_atts(array( 'align' => '', 'left' => '', 'right' => '' ), $atts));  
			$align = $align ? 'align-'.$align : '';  
			$paddingleft = $left ? 'padding-left:'.$left.'px;' : '';  
			$paddingright = $right ? 'padding-right:'.$right.'px;' : '';  
			$style = ($paddingleft || $paddingright) ? ' style="'.$paddingleft.$paddingright.'"' : '';  
			$output = '<h3 class="ps-tag-line ' . $align . '" '.$style.'>' . prima_clean_invalid_autop($content) . '</h3>';
		break;
		
		/* Quote */
		case 'quote':
			extract(shortcode_atts(array( 'style' => '', 'float' => ''), $atts));
			$class = '';
			if ( $style ) $class .= ' '.$style;
			if ( $float ) $class .= ' '.$float;
			$output = '<div class="ps-quote' . $class . '"><p>' . prima_clean_invalid_autop($content) . '</p></div>';
		break;
		
		/* Box */
		case 'box_container':
		case 'box':
			extract(shortcode_atts(array( 'color' => '', 'style' => '', 'float' => '', 'border' => '', 'icon' => ''), $atts)); 
			$output = '<div class="ps-box '.$color.' '.$style.' '.$float.' '.$border.'">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		
		/* Button */
		case 'button':
			extract(shortcode_atts(array( 'size' => '', 'icon' => '', 'color' => '', 'class' => '', 'link' => '#', 'window' => ''), $atts));
			if ( $window ) $window = 'target="_blank" ';
			$output = '<a '.$window.' href="'.$link.'"class="ps-button '.$size.' '.$color.' '.$class.'"><span>' . prima_clean_invalid_autop($content) . '</span></a>';
		break;
		
		/* Tabs */
		case 'tabs':
			extract( shortcode_atts( array( 'style' => 'default' ), $atts ) );
			preg_match_all( '/tab title="([^\"]+)"/i', $content, $matches, PREG_OFFSET_CAPTURE );
			$tab_titles = array();
			$tabs_class = 'tab_titles';
			if ( isset( $matches[1] ) ) { $tab_titles = $matches[1]; }
			$titles_html = '';
			if ( count( $tab_titles ) ) {
				$titles_html .= '<ul class="ps-tabs">' . "\n";
				foreach ( $tab_titles as $t ) {
					$tabid = str_replace( '', '-', $t[0]);
					$tabid = preg_replace( '/[^A-Za-z0-9\-]/', '_', $tabid );
					$tabid = '#tab-' . $tabid;
					$titles_html .= '<li><span data-tab="'.$tabid.'">' . $t[0] . '</span></li>' . "\n";
				}
				$titles_html .= '</ul>' . "\n";
			}
			/* Removes invalid <br/> or </p> tag in the begining and invalid <p> in the end of column block. */
			$content = preg_replace( array( '/^<\/p>/', '/<p>$/', '/^<br \/>/', '/<br \/>$/' ), '', $content);
			/* Removes invalid <br/> or </p> between two column block. */
			$content = str_replace( array( "]<br />[", "]<br />\n[", "]</p>[", "]</p>\n[" ), '][', $content);
			$output = '<div id="tabs-' . rand(1, 100) . '" class="' . $style . '">' . $titles_html . '<div class="ps-tab_container">'. do_shortcode($content) . '</div>' . "\n" . '<div class="ps-divider "></div>' . "\n" . '</div><!--/.tabs-->';
		break;
		case 'tab':
			extract(shortcode_atts(array( 'title' => 'Tab' ), $atts ));		
			$tabid = str_replace( '', '-', $title );
			$tabid = preg_replace( '/[^A-Za-z0-9\-]/', '_', $tabid );
			$tabid = 'tab-' . $tabid;
			$output = '<div id="'.$tabid.'" class="ps-tab_content">' . prima_clean_invalid_autop($content) . '</div>';
		break;
		
		/* Toggle */
		case 'toggle':
			extract(shortcode_atts(array( 'title' => 'Click here to show/hide the content', 'status' => 'close', 'accordion' => 'no' ), $atts ));
			$class_trigger = ( $status == 'open' ) ? 'active ps-toggle-min' : '';
			$class_content = ( $status == 'open' ) ? 'active' : '';
			if ( $accordion == 'yes' )
				$class_trigger .= ' accordion';
			$output = '<div class="ps-toggle-container"><div class="ps-toggle-trigger '.$class_trigger.'"><a href="#">'.$title.'</a></div><div class="ps-toggle-content '.$class_content.'">' . prima_clean_invalid_autop($content) . '</div></div>';
		break;
		
		/* Heading */
		case 'heading':
			extract(shortcode_atts(array(), $atts));
			$output = '<h2 class="ps-heading"><span>' . prima_clean_invalid_autop($content) . '</span></h2>';
		break;
		
		/* Heading */
		case 'icon':
			extract(shortcode_atts(array( 'name' => 'thumbs-up', 'size' => '1', 'color' => '', 'width' => '' ), $atts ));
			$class = 'fa fa-'.$name;
			if ( $size > 5 ) 
				$size = 5;
			if ( $size >=2 && $size <=5 )
				$class .= ' fa-'.$size.'x';
			$style = '';
			if ( $color )
				$style .= 'color:'.$color.';';
			if ( $width )
				$style .= 'width:'.$width.'px;';
			if ( $style )
				$style = ' style="'.$style.'"';
			$output = '<i class="'.$class.'" '.$style.'></i>';
		break;
	}

	return force_balance_tags ( $output );
}

