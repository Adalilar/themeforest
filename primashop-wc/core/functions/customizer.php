<?php
/**
 * Functions to handle theme customizer
 *
 * WARNING: This file is part of the core PrimaThemes framework.
 * DO NOT edit this file under any circumstances. 
 *
 * @category   PrimaThemes
 * @package    Framework
 * @subpackage Functions
 * @author     PrimaThemes
 * @link       http://www.primathemes.com
 */

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

/**
 * Define Design Settings options.
 *
 * @since PrimaThemes 2.0
 */
function prima_design_settings() {
	if ( !current_theme_supports('prima-design-settings') ) 
		return false;
		
	$settings = array();
	return apply_filters( 'prima_design_settings_args', $settings );
}

/**
 * Define Design Settings default options.
 *
 * @since PrimaThemes 2.0
 */
function prima_design_settings_default() {
	if ( !current_theme_supports('prima-design-settings') ) 
		return false;
		
	$settings = prima_design_settings();
	if ( false === $settings ) return false;
	
	$defaut_settings = array();
	foreach ($settings as $setting) {
		if (isset($setting['id'])) 
			$defaut_settings[$setting['id']] = isset($setting['default']) ? $setting['default'] : '';
	}
	
	return $defaut_settings;
}

/**
 * Generate theme customizer options.
 *
 * @since PrimaThemes 2.0
 */
add_action( 'customize_register', 'prima_design_settings_register', 50 );
function prima_design_settings_register( $wp_customize ) {
	if ( !current_theme_supports('prima-design-settings') ) 
		return;

	$design_settings = prima_design_settings();
	
    $default_priority = 140;
	foreach ( $design_settings as $customize ) {
		$default_priority++;
		$defaults = array(
			"name" => "",
			"id" => "",
			"section" => 'colors',
			"database" => PRIMA_DESIGN_SETTINGS,
			"type" => "text",
			"default" => "",
			"options" => array(),
			"priority" => $default_priority,
			"live_preview" => false,
			"css_selector" => "",
			"css_property" => "",
		);
		$customize = wp_parse_args( $customize, $defaults );
		extract( $customize );
		
		if ( $type == 'section' ) {
			$wp_customize->add_section( $id, array(
				'title' => $name,
				'priority' => $priority,
			) );
		}
		else {
			$transport = $live_preview ? 'postMessage' : 'refresh';
			$setting = $database.'['.$id.']';
		}
		switch ( $type ) {
			case 'text':
				$wp_customize->add_setting( $setting, array(
					'default' => $default,
					'type' => 'option',
					'transport' => $transport,
					'sanitize_callback'    => 'prima_design_settings_sanitize_text',
				) );
				$wp_customize->add_control( $setting, array(
					'label' => $name,
					'section' => $section,
					'priority' => $priority,
				) );
			break;
			case 'checkbox':
				$wp_customize->add_setting( $setting, array(
					'default' => $default,
					'type' => 'option',
					'transport' => $transport,
					'sanitize_callback' => 'esc_attr',
				) );
				$wp_customize->add_control( $setting, array(
					'label' => $name,
					'section' => $section,
					'type' => 'checkbox',
					'priority' => $priority,
				) );
			break;
			case 'select':
				$wp_customize->add_setting( $setting, array(
					'default' => $default,
					'type' => 'option',
					'transport' => $transport,
					'sanitize_callback' => 'esc_attr',
				) );
				$wp_customize->add_control( $setting, array(
					'label' => $name,
					'section' => $section,
					'type' => 'select',
					'choices' => $options,
					'priority' => $priority,
				) );
			break;
			case 'radio':
				$wp_customize->add_setting( $setting, array(
					'default' => $default,
					'type' => 'option',
					'transport' => $transport,
					'sanitize_callback' => 'esc_attr',
				) );
				$wp_customize->add_control( $setting, array(
					'label' => $name,
					'section' => $section,
					'type' => 'radio',
					'choices' => $options,
					'priority' => $priority,
				) );
			break;
			case 'color':
				$wp_customize->add_setting( $setting, array(
					'default' => $default,
					'type' => 'option',
					'transport' => $transport,
					'sanitize_callback'    => 'sanitize_hex_color_no_hash',
					'sanitize_js_callback' => 'maybe_hash_hex_color',
				) );
				$wp_customize->add_control( new WP_Customize_Color_Control( $wp_customize, $setting, array(
					'label'   => $name,
					'section' => $section,
					'priority' => $priority,
				) ) );
			break;
			case 'image':
				$wp_customize->add_setting( $setting, array(
					'default' => $default,
					'type' => 'option',
					'transport' => $transport,
					'sanitize_callback' => 'esc_url',
				) );
				$wp_customize->add_control( new WP_Customize_Image_Control( $wp_customize, $setting, array(
					'label'   => $name,
					'section' => $section,
					'priority' => $priority,
				) ) );
			break;
		}
	}
}

/**
 * Sanitize text input.
 *
 * @since PrimaThemes 2.0
 */
function prima_design_settings_sanitize_text( $input ) {
    return wp_kses_post( force_balance_tags( $input ) );
}

/**
 * Add action when saving theme customizer.
 *
 * @since PrimaThemes 2.0
 */
add_action( 'customize_save', 'prima_design_settings_customize_save' );
function prima_design_settings_customize_save() {
	update_option( PRIMA_DESIGN_SETTINGS.'_sync_expire', 'yes' );
	update_option( PRIMA_DESIGN_SETTINGS.'_output_expire', 'yes' );
}

/**
 * Sync design settings and theme settings, if needed.
 *
 * @since PrimaThemes 2.0
 */
add_action( 'admin_head', 'prima_design_settings_sync' );
add_action( 'wp_head', 'prima_design_settings_sync' );
function prima_design_settings_sync() {
	if ( !current_theme_supports('prima-design-settings') ) 
		return;
		
	if ( get_option( PRIMA_DESIGN_SETTINGS.'_sync_expire' ) != 'yes' )
		return;
	
	$theme_settings = (array) get_option( PRIMA_THEME_SETTINGS );
	$design_settings = (array) get_option( PRIMA_DESIGN_SETTINGS );
	if ( isset( $theme_settings['style'] ) ) {
		$design_settings['style'] = $theme_settings['style'];
		update_option( PRIMA_DESIGN_SETTINGS, $design_settings );
	}
	
	update_option( PRIMA_DESIGN_SETTINGS.'_sync_expire', 'no' );
}

/**
 * Generate theme customizer css output.
 *
 * @since PrimaThemes 2.0
 */
add_action( 'admin_head', 'prima_design_settings_generate_output' );
add_action( 'wp_head', 'prima_design_settings_generate_output' );
function prima_design_settings_generate_output( $import = false ) {
	if ( !current_theme_supports('prima-design-settings') ) 
		return;
		
	if ( get_option( PRIMA_DESIGN_SETTINGS.'_output_expire' ) != 'yes' )
		return;
	
	$design_settings = prima_design_settings();
	if ( !$design_settings ) 
		return;
	
	$output = '';
	foreach ( $design_settings as $design_setting ) :
		if ( $design_setting['type'] == 'color' || $design_setting['type'] == 'image' ) {
			$defaults = array(
				"name" => "",
				"id" => "",
				"section" => 'text',
				"database" => PRIMA_DESIGN_SETTINGS,
				"type" => "select",
				"live_preview" => false,
				"css_selector" => "",
				"css_property" => "",
				"css_selector2" => "",
				"css_property2" => "",
				"css_selector3" => "",
				"css_property3" => "",
				"css_additional" => "",
			);
			$design_setting = wp_parse_args( $design_setting, $defaults );
			extract( $design_setting );
			
			if ( $type == 'color' && $css_selector && $css_property ) {
				$value = prima_get_setting($id,PRIMA_DESIGN_SETTINGS);
				if ( $value ) {
					$output .= $css_selector.'{'.$css_property.':#'.$value.'} ';
					if ( $css_selector2 && $css_property2 ) {
						$output .= $css_selector2.'{'.$css_property2.':#'.$value.'} ';
					}
					if ( $css_selector3 && $css_property3 ) {
						$output .= $css_selector3.'{'.$css_property3.':#'.$value.'} ';
					}
					if ( $css_additional ) {
						$output .= $css_additional;
					}
				}
			}
			elseif ( $type == 'image' && $css_selector && $css_property == 'background-image' ) {
				$value = prima_get_setting($id,PRIMA_DESIGN_SETTINGS);
				if ( $value ) {
					$output .= $css_selector.'{background-image:url("'.$value.'")} ';
					if ( $css_additional ) {
						$output .= $css_additional;
					}
				}
			}
		}
	endforeach;

	update_option( PRIMA_DESIGN_SETTINGS.'_output', $output );
	update_option( PRIMA_DESIGN_SETTINGS.'_output_expire', 'no' );
	
	/* Save custom background settings to Design Settings database */
	if ( !$import ) {
		$option = (array) get_option( PRIMA_DESIGN_SETTINGS );
		$option['background_image'] = get_theme_mod( 'background_image' );
		$option['background_color'] = get_theme_mod( 'background_color' );
		$option['background_repeat'] = get_theme_mod( 'background_repeat' );
		$option['background_position_x'] = get_theme_mod( 'background_position_x' );	
		$option['background_attachment'] = get_theme_mod( 'background_attachment' );
		update_option( PRIMA_DESIGN_SETTINGS, $option );
	}
}

/**
 * Echo Design Settings css output.
 *
 * @since PrimaThemes 2.0
 */
add_action( 'prima_custom_styles', 'prima_design_settings_custom_styles' );
function prima_design_settings_custom_styles() {
	if ( !current_theme_supports('prima-design-settings') ) return;

	global $wp_customize;
	if ( !isset( $wp_customize ) || !$wp_customize->is_preview() ) {
		$output = get_option( PRIMA_DESIGN_SETTINGS.'_output' );

		if ( is_ssl() ) 
			$output = str_replace("http://", "https://", $output);

		echo $output;
	}
}

/**
 * Generate theme customizer live preview styles.
 *
 * @since PrimaThemes 2.0
 */
add_action('wp_head', 'prima_design_settings_preview_css', 100);
function prima_design_settings_preview_css() {
	if ( !current_theme_supports('prima-design-settings') ) 
		return;

	global $wp_customize;
	if ( !isset( $wp_customize ) || !$wp_customize->is_preview() )
		return;
		
	$design_settings = prima_design_settings();
	if ( !$design_settings ) 
		return;
	
	foreach ( $design_settings as $design_setting ) :
		$defaults = array(
			"name" => "",
			"id" => "",
			"section" => 'text',
			"database" => PRIMA_DESIGN_SETTINGS,
			"type" => "select",
			"live_preview" => false,
			"css_selector" => "",
			"css_property" => "",
			"css_selector2" => "",
			"css_property2" => "",
			"css_selector3" => "",
			"css_property3" => "",
			"css_additional" => "",
		);
		$design_setting = wp_parse_args( $design_setting, $defaults );
		extract( $design_setting );
		
		if ( $type == 'color' && $live_preview && $css_selector && $css_property ) {
			$output = '';
			$value = prima_get_setting($id,PRIMA_DESIGN_SETTINGS);
			if ( $value ) {
				$output .= $css_selector.'{'.$css_property.':#'.$value.'} ';
				if ( $css_selector2 && $css_property2 ) {
					$output .= $css_selector2.'{'.$css_property2.':#'.$value.'} ';
				}
				if ( $css_selector3 && $css_property3 ) {
					$output .= $css_selector3.'{'.$css_property3.':#'.$value.'} ';
				}
				if ( $css_additional ) {
					$output .= $css_additional;
				}
				?>
				<style type="text/css" id="design_<?php echo $id; ?>"><?php echo $output; ?></style>
				<?php
			}
		
		}
		elseif ( $type == 'image' && $live_preview && $css_selector && $css_property == 'background-image' ) {
			$value = prima_get_setting($id,PRIMA_DESIGN_SETTINGS);
			if ( $value ) {
				$output .= $css_selector.'{background-image:url("'.$value.'")} ';
				if ( $css_additional ) {
					$output .= $css_additional;
				}
				?>
				<style type="text/css" id="design_<?php echo $id; ?>"><?php echo $output; ?></style>
				<?php
			}
		}
		
	endforeach;
}

/**
 * Generate theme customizer live preview scripts.
 *
 * @since PrimaThemes 2.0
 */
add_action('prima_custom_scripts', 'prima_design_settings_preview_js');
function prima_design_settings_preview_js() {
	if ( !current_theme_supports('prima-design-settings') ) 
		return;

	global $wp_customize;
	if ( !isset( $wp_customize ) || !$wp_customize->is_preview() )
		return;
		
	$design_settings = prima_design_settings();
	if ( !$design_settings ) 
		return;
	
?>
	( function( $ ) {
		head = $('head');
<?php
	foreach ( $design_settings as $design_setting ) :
		$defaults = array(
			"name" => "",
			"id" => "",
			"section" => 'text',
			"database" => PRIMA_DESIGN_SETTINGS,
			"type" => "select",
			"live_preview" => false,
			"css_selector" => "",
			"css_property" => "",
			"css_selector2" => "",
			"css_property2" => "",
			"css_selector3" => "",
			"css_property3" => "",
			"css_additional" => "",
		);
		$design_setting = wp_parse_args( $design_setting, $defaults );
		extract( $design_setting );
		
		if ( $type == 'color' && $live_preview && $css_selector && $css_property ) :
		
			$css_output = "$css_selector { $css_property : ' + to + ' } ";
			if ( $css_selector2 && $css_property2 ) 
				$css_output .= "$css_selector2 { $css_property2 : ' + to + ' } ";
			if ( $css_selector3 && $css_property3 ) 
				$css_output .= "$css_selector3 { $css_property3 : ' + to + ' } ";
			if ( $css_additional ) 
				$css_output .= $css_additional;
		?>
		wp.customize('<?php echo $database; ?>[<?php echo $id; ?>]',function( value ) {
			value.bind(function(to) {
				style = $('#design_<?php echo $id; ?>');
				style.remove();
				if ( to ) {
					style = $('<style type="text/css" id="design_<?php echo $id; ?>"><?php echo $css_output; ?></style>').appendTo( head );
				}
			});
		});
		<?php
		
		elseif ( $type == 'image' && $live_preview && $css_selector && $css_property == 'background-image' ) :
		
		?>
		wp.customize('<?php echo $database; ?>[<?php echo $id; ?>]',function( value ) {
			value.bind(function(to) {
				style = $('#design_<?php echo $id; ?>');
				style.remove();
				if ( to ) {
					style = $('<style type="text/css" id="design_<?php echo $id; ?>"><?php echo $css_selector; ?> { background-image: url("' + to + '") }</style>').appendTo( head );
				}
			});
		});
		<?php
		
		endif;
		
	endforeach;
?>
	} )( jQuery )
<?php
}
